"""
Script de demostraci√≥n completa del Sistema de Gesti√≥n de Anuncios Publicitarios
con persistencia en MongoDB
"""
import sys
import os
import time

# Agregar el directorio src al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from db.conexion import conectar, desconectar
from services.datos_basicos_service import DatosBasicosService
from services.anuncio_service import AnuncioService
from models.anuncio import Anuncio

def mostrar_titulo(titulo):
    """Muestra un t√≠tulo con formato"""
    print("\n" + "="*60)
    print(f"üéØ {titulo}")
    print("="*60)

def pausa():
    """Pausa para permitir leer la salida"""
    time.sleep(2)

def demo_completa():
    """Ejecuta una demostraci√≥n completa del sistema"""
    print("üöÄ DEMOSTRACI√ìN DEL SISTEMA DE GESTI√ìN DE ANUNCIOS")
    print("üìä Sistema con persistencia en MongoDB")
    
    # Conectar a MongoDB
    if not conectar():
        print("‚ùå No se pudo conectar a MongoDB. Aseg√∫rate de que est√© ejecut√°ndose.")
        return False
    
    try:
        # 1. Inicializar datos b√°sicos
        mostrar_titulo("INICIALIZACI√ìN DE DATOS B√ÅSICOS")
        medios = DatosBasicosService.inicializar_medios_comunicacion()
        modulos = DatosBasicosService.inicializar_tipos_modulos()
        frecuencias = DatosBasicosService.inicializar_frecuencias_publicacion()
        
        print(f"‚úÖ {len(medios)} medios de comunicaci√≥n inicializados")
        print(f"‚úÖ {len(modulos)} tipos de m√≥dulos inicializados")
        print(f"‚úÖ {len(frecuencias)} frecuencias de publicaci√≥n inicializadas")
        pausa()
        
        # 2. Inicializar anuncios de prueba
        mostrar_titulo("INICIALIZACI√ìN DE ANUNCIOS DE PRUEBA")
        AnuncioService.inicializar_anuncios_prueba(medios, modulos, frecuencias)
        anuncios = AnuncioService.obtener_todos_los_anuncios()
        print(f"‚úÖ {len(anuncios)} anuncios de prueba creados")
        pausa()
        
        # 3. Mostrar todos los anuncios
        mostrar_titulo("LISTADO DE ANUNCIOS ACTUALES")
        for i, anuncio in enumerate(anuncios, 1):
            print(f"{i:2d}. {anuncio.empresa} - {anuncio.medio.nombre} - "
                  f"{anuncio.modulo.nombre} - {anuncio.frecuencia.nombre} - ${anuncio.precio:,.2f}")
        pausa()
        
        # 4. Calcular ingresos totales
        mostrar_titulo("C√ÅLCULO DE INGRESOS TOTALES")
        total_ingresos = sum(anuncio.precio for anuncio in anuncios if anuncio.activo)
        print(f"üí∞ Ingresos totales: ${total_ingresos:,.2f}")
        pausa()
        
        # 5. Buscar anuncios por empresa
        mostrar_titulo("B√öSQUEDA POR EMPRESA")
        empresa_buscar = "Marketing Masters"
        anuncios_empresa = AnuncioService.buscar_anuncios_por_empresa(empresa_buscar)
        print(f"üîç Anuncios de '{empresa_buscar}':")
        for anuncio in anuncios_empresa:
            print(f"   - {anuncio.medio.nombre} - {anuncio.modulo.nombre} - "
                  f"{anuncio.frecuencia.nombre} - ${anuncio.precio:,.2f}")
        pausa()
        
        # 6. Crear un nuevo anuncio
        mostrar_titulo("CREACI√ìN DE NUEVO ANUNCIO")
        
        nuevo_anuncio = AnuncioService.crear_anuncio(
            medio=medios[0],  # El Norte√±o
            modulo=modulos[2],  # M3
            frecuencia=frecuencias[0],  # D (Diario)
            empresa='Empresa Demo',
            precio=2100.0
        )
        
        if nuevo_anuncio:
            print(f"‚úÖ Nuevo anuncio creado: {nuevo_anuncio.empresa} - ${nuevo_anuncio.precio:,.2f}")
        pausa()
        
        # 7. Actualizar total de anuncios
        anuncios_actualizados = AnuncioService.obtener_todos_los_anuncios()
        print(f"üìä Total de anuncios despu√©s de la creaci√≥n: {len(anuncios_actualizados)}")
        pausa()
        
        # 8. Modificar el anuncio reci√©n creado
        mostrar_titulo("MODIFICACI√ìN DE ANUNCIO")
        if nuevo_anuncio:
            anuncio_actualizado = AnuncioService.actualizar_anuncio_por_id(
                nuevo_anuncio.id,
                empresa="Empresa Demo Actualizada",
                precio=2500.0
            )
            if anuncio_actualizado:
                print("‚úÖ Anuncio modificado exitosamente")
                print(f"   Nuevo nombre: {anuncio_actualizado.empresa}")
                print(f"   Nuevo precio: ${anuncio_actualizado.precio:,.2f}")
            else:
                print("‚ùå Error al modificar el anuncio")
        pausa()
        
        # 9. Mostrar estad√≠sticas finales
        mostrar_titulo("ESTAD√çSTICAS FINALES")
        anuncios_finales = AnuncioService.obtener_todos_los_anuncios()
        total_final = sum(anuncio.precio for anuncio in anuncios_finales if anuncio.activo)
        
        print(f"üìä Total de anuncios: {len(anuncios_finales)}")
        print(f"üí∞ Ingresos totales finales: ${total_final:,.2f}")
        
        # Contar por medio
        medios_conteo = {}
        for anuncio in anuncios_finales:
            if anuncio.activo:
                medio = anuncio.medio.nombre
                medios_conteo[medio] = medios_conteo.get(medio, 0) + 1
        
        print("\nüìà Distribuci√≥n por medio:")
        for medio, cantidad in medios_conteo.items():
            print(f"   {medio}: {cantidad} anuncios")
        
        pausa()
        
        # 10. Demostrar eliminaci√≥n l√≥gica
        mostrar_titulo("ELIMINACI√ìN L√ìGICA DE ANUNCIO")
        if nuevo_anuncio:
            AnuncioService.eliminar_anuncio(nuevo_anuncio.id)
            print(f"‚úÖ Anuncio de '{nuevo_anuncio.empresa}' eliminado (eliminaci√≥n l√≥gica)")
            
            # Verificar que ya no aparece en listados activos
            anuncios_activos = AnuncioService.obtener_todos_los_anuncios()
            print(f"üìä Anuncios activos despu√©s de eliminaci√≥n: {len(anuncios_activos)}")
        
        mostrar_titulo("DEMOSTRACI√ìN COMPLETADA")
        print("‚úÖ Todas las funcionalidades han sido demostradas exitosamente")
        print("üìä Los datos han sido persistidos en MongoDB")
        print("üîÑ Puedes ejecutar el sistema principal para interactuar manualmente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la demostraci√≥n: {e}")
        return False
    
    finally:
        # Desconectar de MongoDB
        desconectar()

def main():
    """Funci√≥n principal"""
    print("üéØ Sistema de Gesti√≥n de Anuncios Publicitarios - Demostraci√≥n MongoDB")
    print("‚è≥ Iniciando demostraci√≥n completa...")
    
    if demo_completa():
        print("\nüéâ ¬°Demostraci√≥n completada exitosamente!")
        print("üí° Para usar el sistema interactivamente, ejecuta: python src/main.py")
    else:
        print("\n‚ùå La demostraci√≥n fall√≥")
        print("üîß Verifica que MongoDB est√© ejecut√°ndose y las dependencias instaladas")

if __name__ == "__main__":
    main()
